
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Mar 08 12:25:14 CET 2018
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import AST.*;

/** CUP v0.10k generated parser.
  * @version Thu Mar 08 12:25:14 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\003\010\000\002\011" +
    "\005\000\002\011\002\000\002\005\004\000\002\005\002" +
    "\000\002\004\004\000\002\004\005\000\002\006\004\000" +
    "\002\010\003\000\002\010\005\000\002\007\011\000\002" +
    "\012\005\000\002\012\004\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\014\005" +
    "\000\002\015\007\000\002\015\011\000\002\016\007\000" +
    "\002\017\012\000\002\020\003\000\002\020\005\000\002" +
    "\020\003\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\004\000\002\020\006" +
    "\000\002\020\003\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\020\003\000\002\020\005\000\002" +
    "\020\005\000\002\020\004\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\004\017\004\001\002\000\004\047\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\010\016\ufffe\022\ufffe\034\011\001\002\000\006\016" +
    "\ufffc\022\017\001\002\000\004\047\013\001\002\000\004" +
    "\035\016\001\002\000\010\025\ufff8\035\ufff8\037\014\001" +
    "\002\000\004\047\013\001\002\000\006\025\ufff7\035\ufff7" +
    "\001\002\000\006\016\uffff\022\uffff\001\002\000\004\044" +
    "\151\001\002\000\004\016\022\001\002\000\012\004\113" +
    "\010\110\011\112\047\111\001\002\000\004\034\023\001" +
    "\002\000\032\013\035\020\026\021\037\023\034\024\027" +
    "\034\032\040\025\042\040\043\033\045\031\046\036\047" +
    "\024\001\002\000\036\005\uffea\012\uffea\014\uffea\015\uffea" +
    "\025\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\001\002\000\032\013\035" +
    "\020\026\021\037\023\034\024\027\034\032\040\025\042" +
    "\040\043\033\045\031\046\036\047\024\001\002\000\004" +
    "\034\103\001\002\000\004\034\100\001\002\000\026\014" +
    "\043\015\053\027\046\030\047\031\050\032\051\033\045" +
    "\036\054\037\074\040\044\001\002\000\036\005\uffdd\012" +
    "\uffdd\014\uffdd\015\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\001" +
    "\002\000\032\013\035\020\026\021\037\023\034\024\027" +
    "\034\032\040\025\042\040\043\033\045\031\046\036\047" +
    "\024\001\002\000\036\005\uffe8\012\uffe8\014\uffe8\015\uffe8" +
    "\025\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\001\002\000\004\034\067" +
    "\001\002\000\032\013\035\020\026\021\037\023\034\024" +
    "\027\034\032\040\025\042\040\043\033\045\031\046\036" +
    "\047\024\001\002\000\036\005\uffe1\012\uffe1\014\uffe1\015" +
    "\uffe1\025\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\001\002\000\004\034" +
    "\041\001\002\000\036\005\uffd6\012\uffd6\014\uffd6\015\uffd6" +
    "\025\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\001\002\000\032\013\035" +
    "\020\026\021\037\023\034\024\027\034\032\040\025\042" +
    "\040\043\033\045\031\046\036\047\024\001\002\000\026" +
    "\014\043\015\053\027\046\030\047\031\050\032\051\033" +
    "\045\035\052\036\054\040\044\001\002\000\032\013\035" +
    "\020\026\021\037\023\034\024\027\034\032\040\025\042" +
    "\040\043\033\045\031\046\036\047\024\001\002\000\032" +
    "\013\035\020\026\021\037\023\034\024\027\034\032\040" +
    "\025\042\040\043\033\045\031\046\036\047\024\001\002" +
    "\000\032\013\035\020\026\021\037\023\034\024\027\034" +
    "\032\040\025\042\040\043\033\045\031\046\036\047\024" +
    "\001\002\000\032\013\035\020\026\021\037\023\034\024" +
    "\027\034\032\040\025\042\040\043\033\045\031\046\036" +
    "\047\024\001\002\000\032\013\035\020\026\021\037\023" +
    "\034\024\027\034\032\040\025\042\040\043\033\045\031" +
    "\046\036\047\024\001\002\000\032\013\035\020\026\021" +
    "\037\023\034\024\027\034\032\040\025\042\040\043\033" +
    "\045\031\046\036\047\024\001\002\000\032\013\035\020" +
    "\026\021\037\023\034\024\027\034\032\040\025\042\040" +
    "\043\033\045\031\046\036\047\024\001\002\000\036\005" +
    "\uffe2\012\uffe2\014\uffe2\015\uffe2\025\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\001\002\000\032\013\035\020\026\021\037\023\034" +
    "\024\027\034\032\040\025\042\040\043\033\045\031\046" +
    "\036\047\024\001\002\000\032\013\035\020\026\021\037" +
    "\023\034\024\027\034\032\040\025\042\040\043\033\045" +
    "\031\046\036\047\024\001\002\000\036\005\uffd9\012\uffd9" +
    "\014\uffd9\015\uffd9\025\uffd9\027\046\030\047\031\050\032" +
    "\051\033\045\035\uffd9\036\054\037\uffd9\040\044\001\002" +
    "\000\036\005\uffdb\012\uffdb\014\043\015\uffdb\025\uffdb\027" +
    "\046\030\047\031\050\032\051\033\045\035\uffdb\036\054" +
    "\037\uffdb\040\044\001\002\000\036\005\uffe4\012\uffe4\014" +
    "\uffe4\015\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\001\002\000" +
    "\036\005\uffe7\012\uffe7\014\uffe7\015\uffe7\025\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\051\033\045\035\uffe7\036\uffe7\037" +
    "\uffe7\040\044\001\002\000\036\005\uffd7\012\uffd7\014\uffd7" +
    "\015\uffd7\025\uffd7\027\uffd7\030\047\031\050\032\051\033" +
    "\045\035\uffd7\036\uffd7\037\uffd7\040\044\001\002\000\036" +
    "\005\uffd8\012\uffd8\014\uffd8\015\uffd8\025\uffd8\027\046\030" +
    "\047\031\050\032\051\033\045\035\uffd8\036\uffd8\037\uffd8" +
    "\040\044\001\002\000\036\005\uffe5\012\uffe5\014\uffe5\015" +
    "\uffe5\025\uffe5\027\uffe5\030\uffe5\031\uffe5\032\051\033\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\001\002\000\036\005" +
    "\uffe6\012\uffe6\014\uffe6\015\uffe6\025\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\051\033\045\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\001\002\000\036\005\uffdc\012\uffdc\014\uffdc\015\uffdc" +
    "\025\uffdc\027\046\030\047\031\050\032\051\033\045\035" +
    "\uffdc\036\054\037\uffdc\040\044\001\002\000\036\005\uffda" +
    "\012\uffda\014\uffda\015\uffda\025\uffda\027\046\030\047\031" +
    "\050\032\051\033\045\035\uffda\036\054\037\uffda\040\044" +
    "\001\002\000\032\013\035\020\026\021\037\023\034\024" +
    "\027\034\032\040\025\042\040\043\033\045\031\046\036" +
    "\047\024\001\002\000\026\014\043\015\053\027\046\030" +
    "\047\031\050\032\051\033\045\035\071\036\054\040\044" +
    "\001\002\000\036\005\uffdf\012\uffdf\014\uffdf\015\uffdf\025" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\001\002\000\026\014\043\015" +
    "\053\027\046\030\047\031\050\032\051\033\045\035\073" +
    "\036\054\040\044\001\002\000\036\005\uffe9\012\uffe9\014" +
    "\uffe9\015\uffe9\025\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\001\002\000" +
    "\032\013\035\020\026\021\037\023\034\024\027\034\032" +
    "\040\025\042\040\043\033\045\031\046\036\047\024\001" +
    "\002\000\026\014\043\015\053\027\046\030\047\031\050" +
    "\032\051\033\045\035\076\036\054\040\044\001\002\000" +
    "\004\025\077\001\002\000\012\004\ufff6\010\ufff6\011\ufff6" +
    "\047\ufff6\001\002\000\032\013\035\020\026\021\037\023" +
    "\034\024\027\034\032\040\025\042\040\043\033\045\031" +
    "\046\036\047\024\001\002\000\026\014\043\015\053\027" +
    "\046\030\047\031\050\032\051\033\045\035\102\036\054" +
    "\040\044\001\002\000\036\005\uffde\012\uffde\014\uffde\015" +
    "\uffde\025\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\035\uffde\036\uffde\037\uffde\040\uffde\001\002\000\032\013" +
    "\035\020\026\021\037\023\034\024\027\034\032\040\025" +
    "\042\040\043\033\045\031\046\036\047\024\001\002\000" +
    "\026\014\043\015\053\027\046\030\047\031\050\032\051" +
    "\033\045\035\105\036\054\040\044\001\002\000\036\005" +
    "\uffe0\012\uffe0\014\uffe0\015\uffe0\025\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\035\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\001\002\000\036\005\uffe3\012\uffe3\014\uffe3\015\uffe3" +
    "\025\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\001\002\000\004\025\ufff2" +
    "\001\002\000\032\013\035\020\026\021\037\023\034\024" +
    "\027\034\032\040\025\042\040\043\033\045\031\046\036" +
    "\047\024\001\002\000\004\026\141\001\002\000\004\034" +
    "\132\001\002\000\032\013\035\020\026\021\037\023\034" +
    "\024\027\034\032\040\025\042\040\043\033\045\031\046" +
    "\036\047\024\001\002\000\004\025\ufff3\001\002\000\004" +
    "\025\ufff1\001\002\000\004\025\121\001\002\000\004\025" +
    "\ufff0\001\002\000\004\002\000\001\002\000\020\002\ufff4" +
    "\004\113\006\ufff4\007\ufff4\010\110\011\112\047\111\001" +
    "\002\000\010\002\ufff5\006\ufff5\007\ufff5\001\002\000\026" +
    "\005\124\014\043\015\053\027\046\030\047\031\050\032" +
    "\051\033\045\036\054\040\044\001\002\000\012\004\113" +
    "\010\110\011\112\047\111\001\002\000\006\006\126\007" +
    "\127\001\002\000\012\004\113\010\110\011\112\047\111" +
    "\001\002\000\004\025\uffee\001\002\000\004\007\131\001" +
    "\002\000\004\025\uffed\001\002\000\004\050\133\001\002" +
    "\000\004\037\134\001\002\000\032\013\035\020\026\021" +
    "\037\023\034\024\027\034\032\040\025\042\040\043\033" +
    "\045\031\046\036\047\024\001\002\000\026\014\043\015" +
    "\053\027\046\030\047\031\050\032\051\033\045\036\054" +
    "\037\136\040\044\001\002\000\032\013\035\020\026\021" +
    "\037\023\034\024\027\034\032\040\025\042\040\043\033" +
    "\045\031\046\036\047\024\001\002\000\026\014\043\015" +
    "\053\027\046\030\047\031\050\032\051\033\045\035\140" +
    "\036\054\040\044\001\002\000\004\025\uffeb\001\002\000" +
    "\032\013\035\020\026\021\037\023\034\024\027\034\032" +
    "\040\025\042\040\043\033\045\031\046\036\047\024\001" +
    "\002\000\026\014\043\015\053\025\uffef\027\046\030\047" +
    "\031\050\032\051\033\045\036\054\040\044\001\002\000" +
    "\026\012\144\014\043\015\053\027\046\030\047\031\050" +
    "\032\051\033\045\036\054\040\044\001\002\000\012\004" +
    "\113\010\110\011\112\047\111\001\002\000\004\007\146" +
    "\001\002\000\004\025\uffec\001\002\000\004\016\ufffd\001" +
    "\002\000\004\025\153\001\002\000\004\047\013\001\002" +
    "\000\004\025\ufff9\001\002\000\006\016\ufffb\044\151\001" +
    "\002\000\004\016\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\152\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\007\001\001" +
    "\000\004\005\017\001\001\000\004\010\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\146\006" +
    "\147\001\001\000\004\007\020\001\001\000\016\012\117" +
    "\013\115\014\113\015\106\016\114\017\116\001\001\000" +
    "\002\001\001\000\004\020\027\001\001\000\002\001\001" +
    "\000\004\020\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\041\001\001\000\002\001\001\000" +
    "\004\020\064\001\001\000\004\020\063\001\001\000\004" +
    "\020\062\001\001\000\004\020\061\001\001\000\004\020" +
    "\060\001\001\000\004\020\057\001\001\000\004\020\056" +
    "\001\001\000\002\001\001\000\004\020\055\001\001\000" +
    "\004\020\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\121\013\115\014\113" +
    "\015\106\016\114\017\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\012\124\013\115\014\113\015\106" +
    "\016\114\017\116\001\001\000\002\001\001\000\016\012" +
    "\127\013\115\014\113\015\106\016\114\017\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\134\001\001" +
    "\000\002\001\001\000\004\020\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\144\013\115\014" +
    "\113\015\106\016\114\017\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\151\001\001\000\002\001\001\000\006\004\153" +
    "\006\147\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void syntax_error(Symbol s){
	report_error("Error de sintaxis en linea " + s.left, null);
}

public void unrecovered_syntax_error(Symbol s) throws
	java.lang.Exception{
	report_fatal_error("", null);
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp ::= PI 
            {
              Exp RESULT = null;
		RESULT = new Exp21(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= Exp MAYORQUE Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Exp20(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp ::= Exp MENORQUE Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Exp19(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= Exp IGUALQUE Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Exp18(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= NOT Exp 
            {
              Exp RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Exp17(exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= Exp OR Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Exp16(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= Exp AND Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Exp15(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= CLOG 
            {
              Exp RESULT = null;
		int clogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int clogright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean clog = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Exp14(clog.booleanValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= COSENO PAREN Exp TESIS 
            {
              Exp RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Exp13(exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp ::= SENO PAREN Exp TESIS 
            {
              Exp RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Exp12(exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp ::= INT2REAL PAREN Exp TESIS 
            {
              Exp RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Exp11(exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp ::= CREAL 
            {
              Exp RESULT = null;
		int crealleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int crealright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double creal = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Exp10(creal.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp ::= REAL2INT PAREN Exp TESIS 
            {
              Exp RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Exp9(exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp ::= MENOS Exp 
            {
              Exp RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Exp8(exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp ::= Exp DIV Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Exp7(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp ::= Exp POR Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Exp6(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp ::= Exp MENOS Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Exp5(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp ::= Exp MAS Exp 
            {
              Exp RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Exp4(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp ::= CENT 
            {
              Exp RESULT = null;
		int centleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int centright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer cent = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Exp3(cent.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp ::= PAREN Exp TESIS 
            {
              Exp RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Exp2(exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp ::= IDENT 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Exp1(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Plot ::= PLOT PAREN COLOR COMA Exp COMA Exp TESIS 
            {
              Plot RESULT = null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String color = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Plot1(color, exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Plot*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Repet ::= WHILE Exp DO Sent END 
            {
              Repet RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Repet1(exp, sent); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Repet*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Cond ::= IF Exp THEN Sent ELSE Sent END 
            {
              Cond RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sent1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sent1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sent sent1 = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sent2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sent2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sent sent2 = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Cond2(exp, sent1, sent2); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Cond ::= IF Exp THEN Sent END 
            {
              Cond RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Cond1(exp, sent); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Asign ::= IDENT ASOP Exp 
            {
              Asign RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Asign1(i, exp); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Asign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SentSimp ::= Plot 
            {
              SentSimp RESULT = null;
		int plotleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int plotright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Plot plot = (Plot)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new SentSimp4(plot); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*SentSimp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SentSimp ::= Repet 
            {
              SentSimp RESULT = null;
		int repetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int repetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Repet repet = (Repet)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new SentSimp3(repet); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*SentSimp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SentSimp ::= Cond 
            {
              SentSimp RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Cond cond = (Cond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new SentSimp2(cond); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*SentSimp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SentSimp ::= Asign 
            {
              SentSimp RESULT = null;
		int asignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Asign asign = (Asign)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new SentSimp1(asign); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*SentSimp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sent ::= SentSimp PC 
            {
              Sent RESULT = null;
		int sentsimpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentsimpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentSimp sentsimp = (SentSimp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Sent2(sentsimp); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Sent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sent ::= SentSimp PC Sent 
            {
              Sent RESULT = null;
		int sentsimpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sentsimpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SentSimp sentsimp = (SentSimp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Sent1(sentsimp, sent); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Sent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Size ::= SIZE PAREN Exp COMA Exp TESIS PC 
            {
              Size RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new Size1(exp1, exp2); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Size*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Lvar ::= IDENT COMA Lvar 
            {
              Lvar RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Lvar lvar = (Lvar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Lvar2(i, lvar); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Lvar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Lvar ::= IDENT 
            {
              Lvar RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Lvar1(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Lvar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Decl ::= TIPO Lvar 
            {
              Decl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Lvar lvar = (Lvar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Decl1(t, lvar); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Vdef ::= Decl PC Vdef 
            {
              Vdef RESULT = null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vdefright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vdef vdef = (Vdef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Vdef2(decl, vdef); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Vdef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Vdef ::= Decl PC 
            {
              Vdef RESULT = null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Decl decl = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Vdef1(decl); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Vdef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Vars ::= 
            {
              Vars RESULT = null;
		RESULT = new Vars2(); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Vars ::= VARS Vdef 
            {
              Vars RESULT = null;
		int vdefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vdefright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vdef vdef = (Vdef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Vars1(vdef); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inp ::= 
            {
              Inp RESULT = null;
		RESULT = new Inp2(); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Inp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inp ::= PAREN Lvar TESIS 
            {
              Inp RESULT = null;
		int lvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Lvar lvar = (Lvar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new Inp1(lvar); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Inp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Prog ::= PROG IDENT Inp Vars Size Sent 
            {
              Prog RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int inpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int inpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Inp inp = (Inp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vars vars = (Vars)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Size size = (Size)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sent sent = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = new Prog1(i, inp, vars, size, sent); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Prog EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

